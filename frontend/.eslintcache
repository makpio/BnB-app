[{"/home/pm/Desktop/github/BnB-app/frontend/src/index.js":"1","/home/pm/Desktop/github/BnB-app/frontend/src/App.js":"2","/home/pm/Desktop/github/BnB-app/frontend/src/reportWebVitals.js":"3","/home/pm/Desktop/github/BnB-app/frontend/src/redux/reducers/auth.js":"4","/home/pm/Desktop/github/BnB-app/frontend/src/routes.js":"5","/home/pm/Desktop/github/BnB-app/frontend/src/containers/Layout.js":"6","/home/pm/Desktop/github/BnB-app/frontend/src/redux/actions/auth.js":"7","/home/pm/Desktop/github/BnB-app/frontend/src/redux/utility.js":"8","/home/pm/Desktop/github/BnB-app/frontend/src/redux/actions/actionsTypes.js":"9","/home/pm/Desktop/github/BnB-app/frontend/src/containers/TaskDetailView.js":"10","/home/pm/Desktop/github/BnB-app/frontend/src/containers/Signup.js":"11","/home/pm/Desktop/github/BnB-app/frontend/src/containers/Login.js":"12","/home/pm/Desktop/github/BnB-app/frontend/src/components/Tree.js":"13","/home/pm/Desktop/github/BnB-app/frontend/src/helpers/PrivateRoute.js":"14","/home/pm/Desktop/github/BnB-app/frontend/src/components/Form.js":"15","/home/pm/Desktop/github/BnB-app/frontend/src/components/AddNode.js":"16","/home/pm/Desktop/github/BnB-app/frontend/src/components/Tasks.js":"17","/home/pm/Desktop/github/BnB-app/frontend/src/containers/AddTaskView.js":"18","/home/pm/Desktop/github/BnB-app/frontend/src/containers/TasksListView.js":"19","/home/pm/Desktop/github/BnB-app/frontend/src/containers/EditTaskView.js":"20","/home/pm/Desktop/github/BnB-app/frontend/src/containers/UserTasksListView.js":"21","/home/pm/Desktop/github/BnB-app/frontend/src/containers/ShowTaskView.js":"22","/home/pm/Desktop/github/BnB-app/frontend/src/components/ShowTask.js":"23"},{"size":835,"mtime":1610834542129,"results":"24","hashOfConfig":"25"},{"size":882,"mtime":1610834542129,"results":"26","hashOfConfig":"25"},{"size":356,"mtime":1609965491362,"results":"27","hashOfConfig":"25"},{"size":1050,"mtime":1610204434716,"results":"28","hashOfConfig":"25"},{"size":1165,"mtime":1612343221949,"results":"29","hashOfConfig":"25"},{"size":2086,"mtime":1612353601460,"results":"30","hashOfConfig":"25"},{"size":2964,"mtime":1612358150015,"results":"31","hashOfConfig":"25"},{"size":139,"mtime":1610834542129,"results":"32","hashOfConfig":"25"},{"size":160,"mtime":1609965491362,"results":"33","hashOfConfig":"25"},{"size":3221,"mtime":1612353841997,"results":"34","hashOfConfig":"25"},{"size":5106,"mtime":1612353818233,"results":"35","hashOfConfig":"25"},{"size":2987,"mtime":1612353315327,"results":"36","hashOfConfig":"25"},{"size":582,"mtime":1612358102707,"results":"37","hashOfConfig":"25"},{"size":469,"mtime":1612358111267,"results":"38","hashOfConfig":"25"},{"size":9545,"mtime":1612353069670,"results":"39","hashOfConfig":"25"},{"size":4617,"mtime":1612353114862,"results":"40","hashOfConfig":"25"},{"size":1226,"mtime":1612353169662,"results":"41","hashOfConfig":"25"},{"size":548,"mtime":1611777839904,"results":"42","hashOfConfig":"25"},{"size":447,"mtime":1611430832620,"results":"43","hashOfConfig":"25"},{"size":920,"mtime":1612353740188,"results":"44","hashOfConfig":"25"},{"size":560,"mtime":1610835602591,"results":"45","hashOfConfig":"25"},{"size":908,"mtime":1612353805393,"results":"46","hashOfConfig":"25"},{"size":3875,"mtime":1612353139462,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"4olp8h",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/home/pm/Desktop/github/BnB-app/frontend/src/index.js",[],["96","97"],"/home/pm/Desktop/github/BnB-app/frontend/src/App.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/reportWebVitals.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/redux/reducers/auth.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/routes.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/containers/Layout.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/redux/actions/auth.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/redux/utility.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/redux/actions/actionsTypes.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/containers/TaskDetailView.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/containers/Signup.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/containers/Login.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/components/Tree.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/helpers/PrivateRoute.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/components/Form.js",["98"],"import React from \"react\";\nimport { Row, Col, Form, Input, Button, Spin, Card } from \"antd\";\nimport CustomTree from \"./Tree\";\nimport AddNodeForm from \"./AddNode\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { withRouter } from \"react-router-dom\";\n\nimport axios from \"axios\";\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nclass CustomForm extends React.Component {\n  state = {\n    data: null,\n    parentId: null,\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.task !== this.props.task) {\n      console.log(\"mam cie\");\n      this.setState({ data: nextProps.task.data });\n    }\n  }\n\n  handleNodeClick = (nodeDatum) => {\n    if (window.confirm(\"Add child of node named: \" + nodeDatum.name)) {\n      this.setState({\n        parentId: nodeDatum.name,\n      });\n    } else if (window.confirm(\"Delete node: \" + nodeDatum.name)) {\n      this.removeNode(nodeDatum.name);\n      this.setState({\n        parentId: null,\n      });\n    } else {\n      this.setState({\n        parentId: null,\n      });\n    }\n  };\n\n  search(tree, value, key = \"name\", reverse = false) {\n    const stack = [tree[0]];\n    while (stack.length) {\n      const node = stack[reverse ? \"pop\" : \"shift\"]();\n      if (node[key] === value) return node;\n      node.children && stack.push(...node.children);\n    }\n    return null;\n  }\n\n  addNode(node) {\n    let nextData = JSON.parse(JSON.stringify(this.state.data));\n    console.log(\"co co to\", nextData);\n    node[\"children\"] = [];\n    node[\"level\"] = this.state.parentId + 1;\n    node[\"parent\"] = this.state.parentId;\n    let parent = this.search(nextData, this.state.parentId);\n    if (this.search(nextData, node.name) !== null) {\n      window.confirm(\n        \"Node with this name: \" + node.name + \"  currently exist! \"\n      );\n      return nextData;\n    }\n    if (!(\"children\" in parent)) {\n      parent[\"children\"] = [];\n    }\n    if (parent[\"children\"].length < 2) {\n      parent[\"children\"].push(node);\n    } else {\n      window.confirm(\n        \"Node: \" + this.state.parentId + \"  cannot has more than 2 children! \"\n      );\n    }\n\n    return nextData;\n  }\n\n  removeFromTree(parent, childNameToRemove) {\n    parent.children = parent.children\n      .filter((child) => {\n        return child.name !== childNameToRemove;\n      })\n      .map((child) => {\n        return this.removeFromTree(child, childNameToRemove);\n      });\n    return parent;\n  }\n\n  removeNode(nodeName) {\n    if (nodeName === \"Top Level\") {\n      window.confirm(\"You cannot delete root node: \" + nodeName);\n      return;\n    }\n    let nextData = JSON.parse(JSON.stringify(this.state.data));\n    this.removeFromTree(nextData[0], nodeName);\n    this.setState({\n      data: nextData,\n    });\n  }\n\n  onFinish = (values, requestType, taskId, buttonName) => {\n    const name = values.name;\n    const data = this.state.data;\n    const username = values.username;\n    const description = values.description;\n    const solution = values.solution;\n    console.log(\"Success:\", name, data, username, description);\n\n    if (requestType === \"post\") {\n      axios\n        .post(\" http://localhost:8000/api/\", {\n          name: name,\n          description: description,\n          username: username,\n          data: data,\n          solution: solution,\n        })\n        .then((res) => console.log(res))\n        .then(() => this.props.history.push(\"/tasks/user\"))\n        .catch((err) => console.error(err));\n    }\n    if (requestType === \"put\") {\n      axios\n        .put(`http://localhost:8000/api/${taskId}/`, {\n          name: name,\n          description: description,\n          username: username,\n          data: data,\n          solution: solution,\n        })\n        .then((res) => console.log(res))\n        .then(() => this.props.history.push(\"/tasks/user\"))\n        .catch((err) => console.error(err));\n    }\n  };\n\n  onFinishFailed = (errorInfo) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  handleDelete = (taskId) => {\n    axios.delete(`http://localhost:8000/api/${taskId}`);\n    this.props.history.push(\"/tasks/user\");\n  };\n\n  constructor(props) {\n    super(props);\n    var handlerUpdateData = this.handlerUpdateData.bind(this);\n  }\n  handlerUpdateData(node) {\n    console.log(\"tu jestem\", node);\n    this.setState({\n      data: this.addNode(node),\n    });\n    console.log(\"it is work\", this.state.data);\n  }\n\n  render() {\n    console.log(\"state node\", this.state.data);\n    return (\n      <div>\n        {this.state.data !== null ? (\n          <div className=\"site-card-wrapper\">\n            {\" \"}\n            <Row gutter={16}>\n              <Col span={7}>\n                {\" \"}\n                <Form\n                  name=\"CustomForm\"\n                  initialValues={{\n                    username: localStorage.username,\n                    description: this.props.task.description,\n                    name: this.props.task.name,\n                    solution: this.props.task.solution,\n                  }}\n                  onFinish={(values) =>\n                    this.onFinish(\n                      values,\n                      this.props.requestType,\n                      this.props.taskId,\n                      this.props.admin,\n                      this.props.username,\n                      this.props.description,\n                      this.state.data,\n                      this.props.buttonName,\n                      this.props.solution\n                    )\n                  }\n                  onFinishFailed={(taskId) =>\n                    this.onFinishFailed(this.props.taskId)\n                  }\n                  labelCol={{\n                    span: 6,\n                  }}\n                  layout=\"horizontal\"\n                  scrollToFirstError\n                >\n                  <Card title=\"Edit task form:\" bordered={true}>\n                    <Form.Item name=\"username\" label=\"Username\">\n                      <Input value=\"username\" readOnly />\n                    </Form.Item>\n                    <Form.Item\n                      name=\"name\"\n                      label=\"Task name\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input task name\",\n                        },\n                      ]}\n                    >\n                      <Input placeholder=\"Task name\" value=\"name\" />\n                    </Form.Item>\n                    <Form.Item\n                      name=\"description\"\n                      label=\"Description\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input task description!\",\n                        },\n                      ]}\n                    >\n                      <Input.TextArea\n                        placeholder=\"Task description\"\n                        value=\"description\"\n                        autosize={{ minRows: 8, maxRows: 20 }}\n                      />\n                    </Form.Item>\n                    <Form.Item\n                      name=\"solution\"\n                      label=\"Solution\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input task solution\",\n                        },\n                      ]}\n                    >\n                      <Input placeholder=\"Task solution\" value=\"solution\" />\n                    </Form.Item>{\" \"}\n                  </Card>\n\n                  <Form.Item></Form.Item>\n                  <Form.Item></Form.Item>\n\n                  <Form.Item>\n                    <Button\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                      block={true}\n                      size=\"large\"\n                      style={{ width: \"80px\" }}\n                    >\n                      {this.props.buttonName}\n                    </Button>\n                  </Form.Item>\n                  {this.props.requestType === \"put\" ? (\n                    <Form.Item>\n                      <Button\n                        block={true}\n                        size=\"large\"\n                        type=\"danger\"\n                        style={{ width: \"80px\" }}\n                        onClick={() => {\n                          if (window.confirm(\"Confirm deleting:\")) {\n                            this.handleDelete(this.props.taskId);\n                          }\n                        }}\n                      >\n                        Delete\n                      </Button>\n                    </Form.Item>\n                  ) : null}\n                </Form>\n              </Col>\n              <Col span={12} label=\"Task\">\n                <Card title=\"Task Tree:\" bordered>\n                  {\" \"}\n                  <CustomTree\n                    data={this.state.data}\n                    onNodeClick={this.handleNodeClick}\n                  ></CustomTree>\n                </Card>{\" \"}\n              </Col>\n              <Col span={5} offset={0}>\n                <div>\n                  <Card title=\"Add Node:\" bordered={true}>\n                    <AddNodeForm\n                      parentId={this.state.parentId}\n                      handlerUpdateData={this.handlerUpdateData.bind(this)}\n                    />\n                  </Card>\n                </div>\n              </Col>\n            </Row>\n          </div>\n        ) : (\n          <Spin indicator={antIcon} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(CustomForm);\n","/home/pm/Desktop/github/BnB-app/frontend/src/components/AddNode.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/components/Tasks.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/containers/AddTaskView.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/containers/TasksListView.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/containers/EditTaskView.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/containers/UserTasksListView.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/containers/ShowTaskView.js",[],"/home/pm/Desktop/github/BnB-app/frontend/src/components/ShowTask.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":149,"column":9,"nodeType":"105","messageId":"106","endLine":149,"endColumn":26},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'handlerUpdateData' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]